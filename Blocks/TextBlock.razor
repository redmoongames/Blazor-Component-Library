@using ElementsLib.Models
@using ElementsLib.BaseElements
@inherits ComponentBaseWithStyles

<BlockScaffolding 
    CssStyles="CssStyles" 
    HeightOfBlock="@(IsFullHeight ? new WebSizePercent(100) : null)">
    <div class="text_block @(IsTitle ? "title" : "text")">
        <Dynamic Tag="@(HtmlTag)" Styles="@TextField.Styles">
            <div class="@GetAdditionalClasses()">
                @TextField
            </div>
        </Dynamic>
    </div>
</BlockScaffolding>


@code {
    [Parameter] public bool IsFullHeight { get; set; }
    [Parameter] public WebText TextField { get; set; } = "Text field";
    [Parameter] public bool IsTitle { get; set; }
    [Parameter] public WebAlign Align { get; set; } = WebAlignType.Left;
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public Dynamic.HtmlTagType HtmlTag { get; set; } = Dynamic.HtmlTagType.P;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (FontLineHeight == null) CssStyles.FontLineHeight = IsTitle ? 1.2f : 1.55f;
    }

    private string GetAdditionalClasses()
    {
        var size = Size switch
        {
            SizeType.SuperMini => "super_mini",
            SizeType.Mini => "mini",
            SizeType.Small => "small",
            SizeType.Medium => "medium",
            SizeType.Big => "big",
            SizeType.Large => "large",
            SizeType.ExtraLarge => "extra_large",
            _ => throw new ArgumentOutOfRangeException()
            };
        
        var align =  Align.Type switch
        {
            WebAlignType.Left => "align-left ",
            WebAlignType.Center => "align-center ",
            WebAlignType.Right => "align-right ",
            _ => throw new ArgumentOutOfRangeException()
            };

        return size + " " + align;
    }

    public enum SizeType
    {
        SuperMini,
        Mini,
        Small,
        Medium,
        Big,
        Large,
        ExtraLarge
    }
}
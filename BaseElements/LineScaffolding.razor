@using ElementsLib.Models


<div class="scaffolding_line @(ScaffoldingName)">
    @if (ScaffoldingStyle.BackgroundFilter != null)
    {
        <div class="scaffolding_line__background_filter" style="background-color: @ScaffoldingStyle.BackgroundFilter">
        </div>
    }
    @if (ScaffoldingStyle.BackgroundVideo != null)
    {
        <video autoplay muted loop>
             <source src='https://static.powerc.store/photo_pc-12.mp4' type='video/mp4'>
        </video>
    }
    @if (ScaffoldingStyle.BackgroundImage != null)
    {
        <div class="scaffolding_line__background_image">
            <img src=@ScaffoldingStyle.BackgroundImage alt="background image"/>
        </div>
    }
    @if (ScaffoldingStyle.BackgroundColor != null)
    {
        <div class="scaffolding_line__background_color" style="background-color: @ScaffoldingStyle.BackgroundColor">
        </div>
        ScaffoldingStyle.BackgroundColor = null;
    }

    <div class="@(IsFullWidthContainer ? "t-container_100" : "t-container")" style="@(ScaffoldingStyle)">
        @if (ChildContent != null)
        {
            <div class="@GetColumnClasses(ChildWidth, ChildLeftMargin) ">
                @ChildContent
            </div>
        }
        @if (ChildContent2 != null)
        {
            <div class="@GetColumnClasses(ChildWidth, ChildLeftMargin) " >
                @ChildContent2
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public virtual bool IsFullWidthContainer { get; set; }
    [Parameter] public IWebStyles ScaffoldingStyle { get; set; }
    [Parameter] public ColumnWidth? ChildWidth { get; set; }
    [Parameter] public ColumnWidth? ChildLeftMargin { get; set; }
    [Parameter] public ColumnWidth? Child2Width { get; set; }
    [Parameter] public ColumnWidth? Child2LeftMargin { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? ChildContent2 { get; set; }

    
    private string GetColumnClasses(ColumnWidth? width, ColumnWidth? leftMargin)
    {
        if (width == ColumnWidth.col_100) 
            return $"{ColumnTransformer.WidthToClassName(ColumnWidth.col_100)}";
        
        var availableLeftSpace = 12 - ColumnTransformer.ColumnWidthToInt(width ?? ColumnWidth.col_12);
        leftMargin = availableLeftSpace - leftMargin < 0 
            ? ColumnTransformer.IntToColumnWidth(availableLeftSpace) 
            : leftMargin;

        return $"t-col {ColumnTransformer.WidthToClassName(width ?? ColumnWidth.col_12)} {ColumnTransformer.LeftSpaceToClassName(leftMargin ?? ColumnWidth.col_0)} ";
    }

    private string ScaffoldingName => ChildContent.Target.GetType().Name;
}